{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"react\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"@emotion/css\"","webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./service/index.ts","webpack:///./types.ts","webpack:///./datasource.ts","webpack:///./common-ds/index.ts","webpack:///./extended/Stack.tsx","webpack:///./extended/EditorRow.tsx","webpack:///./module.ts","webpack:///./components/ConfigEditor.tsx","webpack:///./components/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// const BASE_URL = \"https://api.synectiks.net/cmdb\";\r\n// const APPKUBE_URL=\"http://localhost:3001\"\r\nconst GET_CLOUD_ELEMENT = \"/cloud-element/search\";\r\nconst GET_SUPPORTED_PANELS = \"/api/datasources/aws-namespace\";\r\n\r\nexport class Services {\r\n    cmdbEndpoint=\"\";\r\n    grafanaEndpoint=\"\";\r\n    constructor(cmdbEndpoint: string, grafanaEndpoint: string) {\r\n        this.cmdbEndpoint = cmdbEndpoint;\r\n        this.grafanaEndpoint = grafanaEndpoint;\r\n    }\r\n\r\n    getCloudElements(id: string) {\r\n        return fetch(`${this.cmdbEndpoint}${GET_CLOUD_ELEMENT}?id=${id}`)\r\n            .then(response => response.json());\r\n    }\r\n\r\n    getSupportedPanels(nameSpace: string) {\r\n        return fetch(`${this.cmdbEndpoint}${GET_SUPPORTED_PANELS}/${nameSpace}`)\r\n            .then(response => response.json());\r\n    }\r\n}\r\n","import { DataQuery, DataSourceJsonData } from '@grafana/data';\r\n\r\nexport interface MyQuery extends DataQuery {\r\n  queryText?: string;\r\n  constant: number;\r\n}\r\n\r\nexport const DEFAULT_QUERY: Partial<MyQuery> = {\r\n  constant: 6.5,\r\n};\r\n\r\n/**\r\n * These are options configured for each DataSource instance\r\n */\r\nexport interface MyDataSourceOptions extends DataSourceJsonData {\r\n  grafanaEndpoint?: string;\r\n  cmdbEndpoint?: string;\r\n  awsxEndPoint?: string;\r\n}\r\n\r\n/**\r\n * Value that is used in the backend, but never sent over HTTP to the frontend\r\n */\r\nexport interface MySecureJsonData {\r\n  apiKey?: string;\r\n}\r\n","import { DataSourceInstanceSettings, CoreApp, DataQueryRequest, DataQueryResponse } from '@grafana/data';\r\nimport { DataSourceWithBackend } from '@grafana/runtime';\r\nimport { Services } from './service';\r\nimport { MyQuery, MyDataSourceOptions, DEFAULT_QUERY } from './types';\r\nimport { Observable, from, mergeMap } from 'rxjs';\r\n\r\nexport class DataSource extends DataSourceWithBackend<MyQuery, MyDataSourceOptions> {\r\n  service;\r\n  constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\r\n    super(instanceSettings);\r\n    this.service = new Services(instanceSettings.jsonData.cmdbEndpoint || \"\", instanceSettings.jsonData.grafanaEndpoint || \"\");\r\n    instanceSettings.meta.jsonData = JSON.parse(JSON.stringify(instanceSettings.jsonData));\r\n  }\r\n\r\n  findParam(paramName: string, url: string) {\r\n    if (!url) {\r\n      url = location.href;\r\n    }\r\n    paramName = paramName.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\r\n    const regexS = \"[\\\\?&]\" + paramName + \"=([^&#]*)\";\r\n    const regex = new RegExp(regexS);\r\n    const results = regex.exec(url);\r\n    return results == null ? \"\" : results[1];\r\n  }\r\n\r\n  getCloudElements(id: string) {\r\n    return from(this.service.getCloudElements(id).then(res => {\r\n      let query = {};\r\n      if (res && res[0]) {\r\n        const cloudElement = res[0];\r\n        query = {\r\n          \"elementType\": cloudElement.elementType,\r\n          \"elementId\": parseInt(id, 10),\r\n          \"cloudIdentifierName\": cloudElement.instanceName,\r\n          \"cloudIdentifierId\": cloudElement.instanceId,\r\n          \"environmentId\": parseInt(id, 10),\r\n        };\r\n      }\r\n      return query;\r\n    }));\r\n  };\r\n\r\n  getDefaultQuery(_: CoreApp): Partial<MyQuery> {\r\n    return DEFAULT_QUERY\r\n  }\r\n\r\n  query(request: DataQueryRequest<MyQuery>): Observable<DataQueryResponse> {\r\n    const id = this.findParam(\"var-elementId\", window.location.href);\r\n    if (id) {\r\n      return this.getCloudElements(id).pipe(\r\n        mergeMap((query: object) => {\r\n          let targets = request.targets;\r\n          for (let i = 0; i < targets.length; i++) {\r\n            targets[i] = {\r\n              ...targets[i],\r\n              ...query\r\n            }\r\n          }\r\n          return super.query(request);\r\n        }));\r\n    } else {\r\n      return super.query(request);\r\n    }\r\n  }\r\n}\r\n","export enum MetricEditorMode {\r\n    'Builder',\r\n    'Code',\r\n}\r\n\r\nexport const RESPONSE_TYPE = [\r\n    { label: 'JSON', value: \"JSON\" },\r\n    { label: 'Frame', value: \"Frame\" },\r\n];\r\n\r\nexport const METRIC_EDITOR_MODES = [\r\n    { label: 'Builder', value: MetricEditorMode.Builder },\r\n    { label: 'Code', value: MetricEditorMode.Code },\r\n];\r\n","import { css } from '@emotion/css';\r\nimport React, { CSSProperties, useCallback } from 'react';\r\n\r\nimport { GrafanaTheme2 } from '@grafana/data';\r\n\r\nimport { useStyles2 } from '@grafana/ui';\r\n\r\ninterface StackProps {\r\n  direction?: CSSProperties['flexDirection'];\r\n  alignItems?: CSSProperties['alignItems'];\r\n  wrap?: boolean;\r\n  gap?: number;\r\n  flexGrow?: CSSProperties['flexGrow'];\r\n  children?: React.ReactNode;\r\n}\r\n\r\nexport const Stack: React.FC<StackProps> = ({ children, ...props }) => {\r\n  const styles = useStyles2(useCallback((theme) => getStyles(theme, props), [props]));\r\n\r\n  return <div className={styles.root}>{children}</div>;\r\n};\r\n\r\nconst getStyles = (theme: GrafanaTheme2, props: StackProps) => ({\r\n  root: css({\r\n    display: 'flex',\r\n    flexDirection: props.direction ?? 'row',\r\n    flexWrap: props.wrap ?? true ? 'wrap' : undefined,\r\n    alignItems: props.alignItems,\r\n    gap: theme.spacing(props.gap ?? 2),\r\n    flexGrow: props.flexGrow,\r\n  }),\r\n});\r\n","import { css } from '@emotion/css';\r\nimport React, { useState } from 'react';\r\nimport { GrafanaTheme2 } from '@grafana/data';\r\nimport { useStyles2, Button } from '@grafana/ui';\r\nimport { Stack } from './Stack';\r\n\r\ninterface EditorRowProps {\r\n  label: string;\r\n  collapsible?: boolean;\r\n  title?: () => string | React.ReactNode;\r\n  collapsed?: boolean;\r\n  dataTestId?: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const EditorRow: React.FC<EditorRowProps> = ({ label, collapsible, collapsed = true, title, dataTestId, children }) => {\r\n  const styles = useStyles2(getStyles);\r\n  const [show, setShow] = useState(collapsed);\r\n  const testId = (compType = '') => `infinity-query-row${compType ? '-' + compType : ''}-${(dataTestId || label).replace(/\\ /g, '-')}`.toLowerCase();\r\n  return (\r\n    <div className={styles.root} data-testid={testId('wrapper')}>\r\n      {collapsible && (\r\n        <>\r\n          <Button\r\n            icon={show ? 'angle-down' : 'angle-right'}\r\n            fill=\"text\"\r\n            size=\"sm\"\r\n            variant=\"secondary\"\r\n            onClick={(e) => {\r\n              setShow(!show);\r\n              e.preventDefault();\r\n            }}\r\n            style={{ marginRight: '10px' }}\r\n            data-testid={testId(`collapse-${show ? 'hide' : 'show'}`)}\r\n          />\r\n          <span\r\n            onClick={(e) => {\r\n              setShow(!show);\r\n              e.preventDefault();\r\n            }}\r\n            data-testid={testId(`title`)}\r\n          >\r\n            <b className={styles.collapseTile}>{label}</b>\r\n          </span>\r\n          <span className={styles.collapseTileSecondary}>{title ? title() : 'Options'}</span>\r\n        </>\r\n      )}\r\n      {show && (\r\n        <div style={{ display: 'flex', marginTop: label && collapsible ? '15px' : '0px', marginLeft: '0px' }} data-testid={testId(`children`)}>\r\n          {children}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getStyles = (theme: GrafanaTheme2) => {\r\n  return {\r\n    root: css({\r\n      padding: theme.spacing(1),\r\n      backgroundColor: theme.colors.background.secondary,\r\n      borderRadius: theme.shape.borderRadius(1),\r\n    }),\r\n    collapseTile: css({\r\n      marginRight: theme.spacing(1),\r\n      color: theme.colors.secondary.text,\r\n    }),\r\n    collapseTileSecondary: css({\r\n      color: theme.colors.text.secondary,\r\n      fontSize: theme.typography.bodySmall.fontSize,\r\n      '&:hover': {\r\n        color: theme.colors.secondary.text,\r\n      },\r\n    }),\r\n  };\r\n};\r\n\r\ninterface EditorRowsProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const EditorRows: React.FC<EditorRowsProps> = ({ children }) => {\r\n  return (\r\n    <Stack gap={0.5} direction=\"column\">\r\n      {children}\r\n    </Stack>\r\n  );\r\n};\r\n","import { DataSourcePlugin } from '@grafana/data';\r\nimport { DataSource } from './datasource';\r\nimport { ConfigEditor } from './components/ConfigEditor';\r\nimport { QueryEditor } from './components/QueryEditor';\r\nimport { MyQuery, MyDataSourceOptions } from './types';\r\n\r\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\r\n  .setConfigEditor(ConfigEditor)\r\n  .setQueryEditor(QueryEditor);\r\n","import React, { ChangeEvent } from 'react';\r\nimport { InlineField, Input } from '@grafana/ui';\r\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\r\nimport { MyDataSourceOptions } from '../types';\r\n\r\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions> { }\r\n\r\nexport function ConfigEditor(props: Props) {\r\n  const { onOptionsChange, options } = props;\r\n\r\n  const onAwsxAPIEndpoint = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const jsonData = {\r\n      ...options.jsonData,\r\n      awsxEndPoint: event.target.value,\r\n    };\r\n    onOptionsChange({ ...options, jsonData });\r\n  };\r\n\r\n  const onGrafanaEndPoint = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const jsonData = {\r\n      ...options.jsonData,\r\n      grafanaEndpoint: event.target.value,\r\n    };\r\n    onOptionsChange({ ...options, jsonData });\r\n  };\r\n\r\n  const onAPIEndPointChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const jsonData = {\r\n      ...options.jsonData,\r\n      cmdbEndpoint: event.target.value,\r\n    };\r\n    onOptionsChange({ ...options, jsonData });\r\n  };\r\n\r\n  // Secure field (only sent to the backend)\r\n  // const onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n  //   onOptionsChange({\r\n  //     ...options,\r\n  //     secureJsonData: {\r\n  //       apiKey: event.target.value,\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  // const onResetAPIKey = () => {\r\n  //   onOptionsChange({\r\n  //     ...options,\r\n  //     secureJsonFields: {\r\n  //       ...options.secureJsonFields,\r\n  //       apiKey: false,\r\n  //     },\r\n  //     secureJsonData: {\r\n  //       ...options.secureJsonData,\r\n  //       apiKey: '',\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  const { jsonData } = options;\r\n  // const { jsonData, secureJsonFields } = options;\r\n  // const secureJsonData = (options.secureJsonData || {}) as MySecureJsonData;\r\n\r\n  return (\r\n    <div className=\"gf-form-group\">\r\n      <InlineField label=\"Grafana Endpoint\" labelWidth={24}>\r\n        <Input\r\n          onChange={onGrafanaEndPoint}\r\n          value={jsonData.grafanaEndpoint || ''}\r\n          placeholder=\"http://localhost:3001\"\r\n          width={40}\r\n        />\r\n      </InlineField>\r\n      {/* <InlineField label=\"API Key\" labelWidth={12}>\r\n        <SecretInput\r\n          isConfigured={(secureJsonFields && secureJsonFields.apiKey) as boolean}\r\n          value={secureJsonData.apiKey || ''}\r\n          placeholder=\"Test\"\r\n          width={40}\r\n          onReset={onResetAPIKey}\r\n          onChange={onAPIKeyChange}\r\n        />\r\n      </InlineField> */}\r\n      <InlineField label=\"CMDB API Endpoint\" labelWidth={24}>\r\n        <Input\r\n          onChange={onAPIEndPointChange}\r\n          value={jsonData.cmdbEndpoint || ''}\r\n          placeholder=\"https://api.synectiks.net/cmdb\"\r\n          width={40}\r\n        />\r\n      </InlineField>\r\n      <InlineField label=\"AWSX API Endpoint\" labelWidth={24}>\r\n        <Input\r\n          onChange={onAwsxAPIEndpoint}\r\n          value={jsonData.awsxEndPoint || ''}\r\n          placeholder=\"https://api.synectiks.net/cmdb\"\r\n          width={40}\r\n        />\r\n      </InlineField>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { InlineField, Select, Input } from '@grafana/ui';\r\nimport {\r\n  RESPONSE_TYPE\r\n} from '../common-ds';\r\nimport { EditorRow, EditorRows } from '../extended/EditorRow';\r\nimport { Services } from '../service';\r\n\r\nexport function QueryEditor({ query, onChange, onRunQuery, datasource }: any) {\r\n  const service = new Services(datasource.meta.jsonData.cmdbEndpoint || \"\", datasource.meta.jsonData.grafanaEndpoint || \"\");\r\n  const [elementId, setElementId] = useState(\"\");\r\n  const [supportedPanels, setSupportedPanels] = useState([]);\r\n  const onChanged = useRef(false);\r\n\r\n  const getCloudElements = useCallback((id: string, query: any) => {\r\n    service.getCloudElements(id).then((res) => {\r\n      if (res && res[0]) {\r\n        const cloudElement = res[0];\r\n        query = {\r\n          ...query,\r\n          \"elementType\": cloudElement.elementType,\r\n          \"elementId\": parseInt(id, 10),\r\n          \"cloudIdentifierName\": cloudElement.instanceName,\r\n          \"cloudIdentifierId\": cloudElement.instanceId,\r\n          \"type\": \"appkube-metrics\",\r\n          \"queryMode\": \"Metrics\",\r\n          \"source\": \"url\",\r\n          \"productId\": 1,\r\n          \"environmentId\": parseInt(id, 10),\r\n          \"moduleId\": 2,\r\n          \"serviceId\": 2,\r\n          \"serviceType\": \"java app service\",\r\n          \"cmdbUrl\": \"\",\r\n          \"vaultUrl\": \"\",\r\n          \"namespace\": cloudElement.elementType,\r\n          \"matchExact\": true,\r\n          \"expression\": \"\",\r\n          \"id\": \"\",\r\n          \"alias\": \"\",\r\n          \"period\": \"\",\r\n          \"metricQueryType\": 0,\r\n          \"metricEditorMode\": 0,\r\n          \"sqlExpression\": \"\",\r\n          \"accountId\": \"657907747545\",\r\n          \"region\": \"\"\r\n        };\r\n        onChange({ ...query });\r\n        service.getSupportedPanels(res[0].elementType).then((res) => {\r\n          setSupportedPanels(res);\r\n        });\r\n      }\r\n    });\r\n  }, [onChange]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (onChanged.current === false) {\r\n      const id = findParam(\"var-elementId\", window.location.href);\r\n      if (id) {\r\n        setElementId(id);\r\n        getCloudElements(id, query);\r\n      } else {\r\n        alert(\"Please set 'elementId' variable\");\r\n      }\r\n      onChanged.current = true;\r\n    }\r\n  }, [query, onChange, getCloudElements]);\r\n\r\n  const findParam = (paramName: string, url: string) => {\r\n    if (!url) {\r\n      url = location.href;\r\n    }\r\n    paramName = paramName.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\r\n    const regexS = \"[\\\\?&]\" + paramName + \"=([^&#]*)\";\r\n    const regex = new RegExp(regexS);\r\n    const results = regex.exec(url);\r\n    return results == null ? \"\" : results[1];\r\n  }\r\n\r\n  const onChangeElementType = (e: any) => {\r\n    onChange({ ...query, elementType: e.target.value });\r\n  };\r\n\r\n  const onChangeInstanceID = (e: any) => {\r\n    onChange({ ...query, cloudIdentifierId: e.target.value });\r\n  };\r\n\r\n  const onChangeSupportedPanel = (value: any) => {\r\n    onChange({ ...query, supportedPanel: value });\r\n  };\r\n\r\n  const onChangeResponseType = (value: any) => {\r\n    onChange({ ...query, supportedPanel: value });\r\n  };\r\n\r\n  const {\r\n    elementType,\r\n    cloudIdentifierId,\r\n    supportedPanel,\r\n    responseType\r\n  } = query;\r\n\r\n  return (\r\n    <div>\r\n      <EditorRows>\r\n        <EditorRow label=\"\">\r\n          <InlineField label=\"Element Type\">\r\n            <Input value={elementType} onChange={(e: any) => onChangeElementType(e)} />\r\n          </InlineField>\r\n          <InlineField label=\"Instance ID\">\r\n            <Input value={cloudIdentifierId} onChange={(e: any) => onChangeInstanceID(e)} />\r\n          </InlineField>\r\n          <InlineField label=\"Element ID\">\r\n            <Input disabled={true} value={elementId} />\r\n          </InlineField>\r\n        </EditorRow>\r\n      </EditorRows>\r\n      <EditorRows>\r\n        <EditorRow label=\"\">\r\n          <InlineField label=\"Supported Panels\">\r\n            <Select\r\n              className=\"min-width-12 width-12\"\r\n              value={supportedPanel}\r\n              options={supportedPanels}\r\n              onChange={(e) => onChangeSupportedPanel(e.value)}\r\n              menuShouldPortal={true}\r\n            />\r\n          </InlineField>\r\n          <InlineField label=\"Response Type\">\r\n            <Select\r\n              className=\"min-width-12 width-12\"\r\n              value={responseType}\r\n              options={RESPONSE_TYPE}\r\n              onChange={(e) => onChangeResponseType(e.value)}\r\n              menuShouldPortal={true}\r\n            />\r\n          </InlineField>\r\n        </EditorRow>\r\n      </EditorRows>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__4__","__WEBPACK_EXTERNAL_MODULE__5__","__WEBPACK_EXTERNAL_MODULE__6__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","Services","constructor","cmdbEndpoint","grafanaEndpoint","_defineProperty","this","getCloudElements","id","fetch","then","response","json","getSupportedPanels","nameSpace","DEFAULT_QUERY","constant","DataSource","DataSourceWithBackend","instanceSettings","super","service","jsonData","meta","JSON","parse","stringify","findParam","paramName","url","location","href","replace","results","RegExp","exec","from","res","query","cloudElement","elementType","parseInt","instanceName","instanceId","getDefaultQuery","_","request","window","pipe","mergeMap","targets","i","length","assign","MetricEditorMode","RESPONSE_TYPE","label","Builder","Code","Stack","_ref","children","props","_objectWithoutPropertiesLoose","_excluded","styles","useStyles2","useCallback","theme","getStyles","React","className","root","_props$direction","_props$wrap","_props$gap","css","display","flexDirection","direction","flexWrap","wrap","alignItems","gap","spacing","flexGrow","EditorRow","collapsible","collapsed","title","dataTestId","show","setShow","useState","testId","compType","arguments","toLowerCase","Button","icon","fill","size","variant","onClick","e","preventDefault","style","marginRight","collapseTile","collapseTileSecondary","marginTop","marginLeft","padding","backgroundColor","colors","background","secondary","borderRadius","shape","color","text","fontSize","typography","bodySmall","EditorRows","_ref2","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","options","InlineField","labelWidth","Input","onChange","event","target","placeholder","width","awsxEndPoint","setQueryEditor","onRunQuery","datasource","elementId","setElementId","supportedPanels","setSupportedPanels","onChanged","useRef","useEffect","current","alert","cloudIdentifierId","supportedPanel","responseType","onChangeElementType","onChangeInstanceID","disabled","Select","onChangeSupportedPanel","menuShouldPortal","onChangeResponseType"],"sourceRoot":""}