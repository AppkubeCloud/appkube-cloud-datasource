{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"react\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"@emotion/css\"","webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./service/index.ts","webpack:///./types.ts","webpack:///./datasource.ts","webpack:///./common-ds/index.ts","webpack:///./extended/Stack.tsx","webpack:///./extended/EditorRow.tsx","webpack:///./components/EditorComponents/Metric.tsx","webpack:///./components/EditorComponents/Log.tsx","webpack:///./components/EditorComponents/Trace.tsx","webpack:///./extended/Space.tsx","webpack:///./extended/EditorField.tsx","webpack:///./components/EditorComponents/Api.tsx","webpack:///./module.ts","webpack:///./components/ConfigEditor.tsx","webpack:///./components/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const BASE_URL = \"http://34.199.12.114:6057\";\r\nconst APPKUBE_URL=\"http://localhost:3001\"\r\nconst GET_CLOUD_ELEMENT = \"/api/cloud-element/search\";\r\nconst GET_METRICS_LIST = \"/api/datasources/aws-namespace\";\r\n\r\nexport const services = {\r\n    getCloudElements: function(id: string) {\r\n        return fetch(`${BASE_URL}${GET_CLOUD_ELEMENT}?id=${id}`)\r\n        .then(response => response.json());\r\n    },\r\n    getMetricsList: function(nameSpace: string) {\r\n        return fetch(`${APPKUBE_URL}${GET_METRICS_LIST}/${nameSpace}`)\r\n        .then(response => response.json());\r\n    }\r\n};\r\n","import { DataQuery, DataSourceJsonData } from '@grafana/data';\r\n\r\nexport interface MyQuery extends DataQuery {\r\n  queryText?: string;\r\n  constant: number;\r\n}\r\n\r\nexport const DEFAULT_QUERY: Partial<MyQuery> = {\r\n  constant: 6.5,\r\n};\r\n\r\n/**\r\n * These are options configured for each DataSource instance\r\n */\r\nexport interface MyDataSourceOptions extends DataSourceJsonData {\r\n  path?: string;\r\n  apiEndpoint?: string;\r\n}\r\n\r\n/**\r\n * Value that is used in the backend, but never sent over HTTP to the frontend\r\n */\r\nexport interface MySecureJsonData {\r\n  apiKey?: string;\r\n}\r\n","import { DataSourceInstanceSettings, CoreApp, DataQueryRequest, DataQueryResponse } from '@grafana/data';\r\nimport { DataSourceWithBackend } from '@grafana/runtime';\r\nimport { services } from './service';\r\nimport { MyQuery, MyDataSourceOptions, DEFAULT_QUERY } from './types';\r\nimport { Observable, from, mergeMap } from 'rxjs';\r\n\r\nexport class DataSource extends DataSourceWithBackend<MyQuery, MyDataSourceOptions> {\r\n  constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\r\n    super(instanceSettings);\r\n  }\r\n\r\n  findParam(paramName: string, url: string) {\r\n    if (!url) {\r\n      url = location.href;\r\n    }\r\n    paramName = paramName.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\r\n    const regexS = \"[\\\\?&]\" + paramName + \"=([^&#]*)\";\r\n    const regex = new RegExp(regexS);\r\n    const results = regex.exec(url);\r\n    return results == null ? \"\" : results[1];\r\n  }\r\n\r\n  getCloudElements(id: string) {\r\n    return from(services.getCloudElements(id).then(res => {\r\n      let query = {};\r\n      if (res && res[0]) {\r\n        const cloudElement = res[0];\r\n        query = {\r\n          \"elementType\": cloudElement.elementType,\r\n          \"elementId\": parseInt(id, 10),\r\n          \"cloudIdentifierName\": cloudElement.instanceName,\r\n          \"cloudIdentifierId\": cloudElement.instanceId,\r\n          \"environmentId\": parseInt(id, 10),\r\n        };\r\n      }\r\n      return query;\r\n    }));\r\n  };\r\n\r\n  getDefaultQuery(_: CoreApp): Partial<MyQuery> {\r\n    return DEFAULT_QUERY\r\n  }\r\n\r\n  query(request: DataQueryRequest<MyQuery>): Observable<DataQueryResponse> {\r\n    const id = this.findParam(\"var-elementId\", window.location.href);\r\n    if (id) {\r\n      // return this.getCloudElements(id).pipe(query => {\r\n      //   let targets = request.targets;\r\n      //   for (let i = 0; i < targets.length; i++) {\r\n      //     targets[i] = {\r\n      //       ...targets[i],\r\n      //       ...query\r\n      //     }\r\n      //   }\r\n      //   return super.query(request);\r\n      // });\r\n      return this.getCloudElements(id).pipe(\r\n        mergeMap((query: object) => {\r\n          let targets = request.targets;\r\n          for (let i = 0; i < targets.length; i++) {\r\n            targets[i] = {\r\n              ...targets[i],\r\n              ...query\r\n            }\r\n          }\r\n          return super.query(request);\r\n        }));\r\n    } else {\r\n      return super.query(request);\r\n    }\r\n  }\r\n}\r\n","export const SOURCE_VALUE = {\r\n    METRIC: \"metric\",\r\n    LOG: \"log\",\r\n    TRACE: \"trace\",\r\n    API: \"api\"\r\n};\r\n\r\nexport enum MetricEditorMode {\r\n    'Builder',\r\n    'Code',\r\n}\r\n\r\nexport const SOURCE_TYPE = [\r\n    { label: 'Metric', value: SOURCE_VALUE.METRIC },\r\n    { label: 'LOG', value: SOURCE_VALUE.LOG },\r\n    { label: 'Trace', value: SOURCE_VALUE.TRACE },\r\n    { label: 'API', value: SOURCE_VALUE.API }\r\n];\r\n\r\nexport const METRIC_TYPE = [\r\n    { label: 'INFRA', value: \"infra\" },\r\n    { label: 'SERVICE', value: \"service\" },\r\n];\r\n\r\nexport const DUMMY_PRODUCTS = [\r\n    { label: 'HRMS', value: \"hrms\" },\r\n    { label: 'Procurement', value: \"procurement\" },\r\n    { label: 'Supply Chain', value: \"supply_chain\" },\r\n    { label: 'CMS', value: \"cms\" },\r\n];\r\n\r\nexport const DUMMY_ENVS = [\r\n    { label: 'Prod', value: \"prod\" },\r\n    { label: 'Dev', value: \"dev\" },\r\n    { label: 'Stage', value: \"stage\" },\r\n    { label: 'Test', value: \"test\" },\r\n];\r\n\r\nexport const DUMMY_MODULES = [\r\n    { label: 'Recruitment', value: \"Recruitment\" },\r\n    { label: 'Attendance', value: \"Attendance\" },\r\n    { label: 'Appraisals', value: \"Appraisals\" },\r\n    { label: 'Salary', value: \"Salary\" },\r\n    { label: 'Engagement', value: \"Engagement\" },\r\n    { label: 'Documentation', value: \"Documentation\" },\r\n];\r\n\r\nexport const DUMMY_SERVICES = [\r\n    { label: 'Java app', value: \"Recruitment\" },\r\n    { label: 'RDS Postgres DB', value: \"Attendance\" },\r\n    { label: 'Open Search DB', value: \"Appraisals\" },\r\n    { label: 'S3', value: \"Salary\" },\r\n    { label: 'GitHub', value: \"Engagement\" },\r\n];\r\n\r\nexport const STASTISTIC = [\r\n    { label: 'Maximum', value: \"Maximum\" },\r\n    { label: 'Minimum', value: \"Minimum\" },\r\n    { label: 'Sum', value: \"Sum\" },\r\n    { label: 'SampleCount', value: \"SampleCount\" },\r\n    { label: 'Average', value: \"Average\" },\r\n];\r\n\r\nexport const METRIC_EDITOR_MODES = [\r\n    { label: 'Builder', value: MetricEditorMode.Builder },\r\n    { label: 'Code', value: MetricEditorMode.Code },\r\n];\r\n","import { css } from '@emotion/css';\r\nimport React, { CSSProperties, useCallback } from 'react';\r\n\r\nimport { GrafanaTheme2 } from '@grafana/data';\r\n\r\nimport { useStyles2 } from '@grafana/ui';\r\n\r\ninterface StackProps {\r\n  direction?: CSSProperties['flexDirection'];\r\n  alignItems?: CSSProperties['alignItems'];\r\n  wrap?: boolean;\r\n  gap?: number;\r\n  flexGrow?: CSSProperties['flexGrow'];\r\n  children?: React.ReactNode;\r\n}\r\n\r\nexport const Stack: React.FC<StackProps> = ({ children, ...props }) => {\r\n  const styles = useStyles2(useCallback((theme) => getStyles(theme, props), [props]));\r\n\r\n  return <div className={styles.root}>{children}</div>;\r\n};\r\n\r\nconst getStyles = (theme: GrafanaTheme2, props: StackProps) => ({\r\n  root: css({\r\n    display: 'flex',\r\n    flexDirection: props.direction ?? 'row',\r\n    flexWrap: props.wrap ?? true ? 'wrap' : undefined,\r\n    alignItems: props.alignItems,\r\n    gap: theme.spacing(props.gap ?? 2),\r\n    flexGrow: props.flexGrow,\r\n  }),\r\n});\r\n","import { css } from '@emotion/css';\r\nimport React, { useState } from 'react';\r\nimport { GrafanaTheme2 } from '@grafana/data';\r\nimport { useStyles2, Button } from '@grafana/ui';\r\nimport { Stack } from './Stack';\r\n\r\ninterface EditorRowProps {\r\n  label: string;\r\n  collapsible?: boolean;\r\n  title?: () => string | React.ReactNode;\r\n  collapsed?: boolean;\r\n  dataTestId?: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const EditorRow: React.FC<EditorRowProps> = ({ label, collapsible, collapsed = true, title, dataTestId, children }) => {\r\n  const styles = useStyles2(getStyles);\r\n  const [show, setShow] = useState(collapsed);\r\n  const testId = (compType = '') => `infinity-query-row${compType ? '-' + compType : ''}-${(dataTestId || label).replace(/\\ /g, '-')}`.toLowerCase();\r\n  return (\r\n    <div className={styles.root} data-testid={testId('wrapper')}>\r\n      {collapsible && (\r\n        <>\r\n          <Button\r\n            icon={show ? 'angle-down' : 'angle-right'}\r\n            fill=\"text\"\r\n            size=\"sm\"\r\n            variant=\"secondary\"\r\n            onClick={(e) => {\r\n              setShow(!show);\r\n              e.preventDefault();\r\n            }}\r\n            style={{ marginRight: '10px' }}\r\n            data-testid={testId(`collapse-${show ? 'hide' : 'show'}`)}\r\n          />\r\n          <span\r\n            onClick={(e) => {\r\n              setShow(!show);\r\n              e.preventDefault();\r\n            }}\r\n            data-testid={testId(`title`)}\r\n          >\r\n            <b className={styles.collapseTile}>{label}</b>\r\n          </span>\r\n          <span className={styles.collapseTileSecondary}>{title ? title() : 'Options'}</span>\r\n        </>\r\n      )}\r\n      {show && (\r\n        <div style={{ display: 'flex', marginTop: label && collapsible ? '15px' : '0px', marginLeft: '0px' }} data-testid={testId(`children`)}>\r\n          {children}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getStyles = (theme: GrafanaTheme2) => {\r\n  return {\r\n    root: css({\r\n      padding: theme.spacing(1),\r\n      backgroundColor: theme.colors.background.secondary,\r\n      borderRadius: theme.shape.borderRadius(1),\r\n    }),\r\n    collapseTile: css({\r\n      marginRight: theme.spacing(1),\r\n      color: theme.colors.secondary.text,\r\n    }),\r\n    collapseTileSecondary: css({\r\n      color: theme.colors.text.secondary,\r\n      fontSize: theme.typography.bodySmall.fontSize,\r\n      '&:hover': {\r\n        color: theme.colors.secondary.text,\r\n      },\r\n    }),\r\n  };\r\n};\r\n\r\ninterface EditorRowsProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const EditorRows: React.FC<EditorRowsProps> = ({ children }) => {\r\n  return (\r\n    <Stack gap={0.5} direction=\"column\">\r\n      {children}\r\n    </Stack>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Select, InlineField, Input } from '@grafana/ui';\r\nimport { EditorRow, EditorRows } from '../../extended/EditorRow';\r\nimport { STASTISTIC, MetricEditorMode } from '../../common-ds';\r\n\r\nexport function Metric({ query, onChange, editorMode, metricsList }: any) {\r\n  const { elementType, cloudIdentifierId, metricName, statistic, metricQuery } = query;\r\n\r\n  const onChangeElementType = (e: any) => {\r\n    onChange({ ...query, elementType: e.target.value });\r\n  };\r\n\r\n  const onChangeInstanceID = (e: any) => {\r\n    onChange({ ...query, cloudIdentifierId: e.target.value });\r\n  };\r\n\r\n  const onChangeMetricQuery = (e: any) => {\r\n    onChange({ ...query, metricQuery: e.target.value });\r\n  };\r\n\r\n  const onChangeMetricName = (value: any) => {\r\n    onChange({ ...query, metricName: value });\r\n  };\r\n\r\n  const onChangeStatistic = (value: any) => {\r\n    onChange({ ...query, statistic: value });\r\n  };\r\n\r\n\r\n  return (\r\n    <EditorRows>\r\n      <EditorRow label=\"\">\r\n        <InlineField label=\"Element Type\">\r\n          <Input value={elementType} onChange={(e: any) => onChangeElementType(e)} />\r\n        </InlineField>\r\n        <InlineField label=\"Instance ID\">\r\n          <Input value={cloudIdentifierId} onChange={(e: any) => onChangeInstanceID(e)} />\r\n        </InlineField>\r\n      </EditorRow>\r\n      {\r\n        editorMode === MetricEditorMode.Builder ?\r\n          <EditorRow label=\"\">\r\n            <InlineField label=\"Metric Name\">\r\n              <Select\r\n                className=\"min-width-12 width-12\"\r\n                value={metricName}\r\n                options={metricsList}\r\n                onChange={(e) => onChangeMetricName(e.value)}\r\n                menuShouldPortal={true}\r\n              />\r\n            </InlineField>\r\n            <InlineField label=\"Statistic\">\r\n              <Select className=\"min-width-12 width-12\" value={statistic} options={STASTISTIC} onChange={(e) => onChangeStatistic(e.value)} menuShouldPortal={true} />\r\n            </InlineField>\r\n          </EditorRow> :\r\n          <EditorRow label=\"\">\r\n            <Input placeholder='Enter your query' value={metricQuery} onChange={(e: any) => onChangeMetricQuery(e)} />\r\n          </EditorRow>\r\n      }\r\n    </EditorRows>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { InlineField, Input } from '@grafana/ui';\r\nimport { EditorRow, EditorRows } from '../../extended/EditorRow';\r\n// import { DUMMY_PRODUCTS, DUMMY_ENVS, DUMMY_MODULES, DUMMY_SERVICES } from '../../common-ds';\r\n\r\n\r\nexport function Log({ query, onChange }: any) {\r\n  const { elementType, instanceID, logQuery, logGroup } = query;\r\n\r\n  const onChangeElementType = (e: any) => {\r\n    onChange({ ...query, elementType: e.target.value });\r\n  };\r\n\r\n  const onChangeInstanceID = (e: any) => {\r\n    onChange({ ...query, instanceID: e.target.value });\r\n  };\r\n\r\n  const onChangeLogGroup = (e: any) => {\r\n    onChange({ ...query, logGroup: e.target.value });\r\n  };\r\n\r\n  const onChangeLogQuery = (e: any) => {\r\n    onChange({ ...query, logQuery: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <EditorRows>\r\n      <EditorRow label=\"\">\r\n        <InlineField label=\"Element Type\">\r\n          <Input value={elementType} onChange={(e: any) => onChangeElementType(e)} />\r\n        </InlineField>\r\n        <InlineField label=\"Instance ID\">\r\n          <Input value={instanceID} onChange={(e: any) => onChangeInstanceID(e)} />\r\n        </InlineField>\r\n        <InlineField label=\"Log Group\">\r\n          <Input value={logGroup} onChange={(e: any) => onChangeLogGroup(e)} />\r\n        </InlineField>\r\n      </EditorRow>\r\n      <EditorRow label=\"\">\r\n        <Input placeholder='Enter your log query' value={logQuery} onChange={(e: any) => onChangeLogQuery(e)} />\r\n      </EditorRow>\r\n    </EditorRows>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { InlineField, Input } from '@grafana/ui';\r\nimport { EditorRow, EditorRows } from '../../extended/EditorRow';\r\n\r\nexport function Trace({ query, onChange }: any) {\r\n  const { elementType, instanceID, traceQuery, traceLocation } = query;\r\n\r\n  const onChangeElementType = (e: any) => {\r\n    onChange({ ...query, elementType: e.target.value });\r\n  };\r\n\r\n  const onChangeInstanceID = (e: any) => {\r\n    onChange({ ...query, instanceID: e.target.value });\r\n  };\r\n\r\n  const onChangeTraceLocation = (e: any) => {\r\n    onChange({ ...query, traceLocation: e.target.value });\r\n  };\r\n\r\n  const onChangeTraceQuery = (e: any) => {\r\n    onChange({ ...query, traceQuery: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <EditorRows>\r\n      <EditorRow label=\"\">\r\n        <InlineField label=\"Element Type\">\r\n          <Input value={elementType} onChange={(e: any) => onChangeElementType(e)} />\r\n        </InlineField>\r\n        <InlineField label=\"Instance ID\">\r\n          <Input value={instanceID} onChange={(e: any) => onChangeInstanceID(e)} />\r\n        </InlineField>\r\n        <InlineField label=\"Trace Location\">\r\n          <Input value={traceLocation} onChange={(e: any) => onChangeTraceLocation(e)} />\r\n        </InlineField>\r\n      </EditorRow>\r\n      <EditorRow label=\"\">\r\n        <Input placeholder='Enter your trace query' value={traceQuery} onChange={(e: any) => onChangeTraceQuery(e)} />\r\n      </EditorRow>\r\n    </EditorRows>\r\n  );\r\n}\r\n","import { css, cx } from '@emotion/css';\r\nimport React from 'react';\r\n\r\nimport { GrafanaTheme2 } from '@grafana/data';\r\n\r\nimport { stylesFactory, useTheme2 } from '@grafana/ui';\r\n\r\nexport interface SpaceProps {\r\n  v?: number;\r\n  h?: number;\r\n  layout?: 'block' | 'inline';\r\n}\r\n\r\nexport const Space = (props: SpaceProps) => {\r\n  const theme = useTheme2();\r\n  const styles = getStyles(theme, props);\r\n\r\n  return <span className={cx(styles.wrapper)} />;\r\n};\r\n\r\nSpace.defaultProps = {\r\n  v: 0,\r\n  h: 0,\r\n  layout: 'block',\r\n};\r\n\r\nconst getStyles = stylesFactory((theme: GrafanaTheme2, props: SpaceProps) => ({\r\n  wrapper: css([\r\n    {\r\n      paddingRight: theme.spacing(props.h ?? 0),\r\n      paddingBottom: theme.spacing(props.v ?? 0),\r\n    },\r\n    props.layout === 'inline' && {\r\n      display: 'inline-block',\r\n    },\r\n    props.layout === 'block' && {\r\n      display: 'block',\r\n    },\r\n  ]),\r\n}));\r\n","import { css } from '@emotion/css';\r\nimport React, { ComponentProps } from 'react';\r\nimport { stylesFactory, useTheme2, ReactUtils, Field, Icon, PopoverContent, Tooltip, Tag } from '@grafana/ui';\r\nimport { Space } from './Space';\r\nimport { Stack } from './Stack';\r\nimport type { GrafanaTheme2 } from '@grafana/data';\r\n\r\nexport const EditorFieldGroup: React.FC<{\r\n  children: React.ReactNode;\r\n}> = ({ children }) => {\r\n  return <Stack gap={1}>{children}</Stack>;\r\n};\r\n\r\ninterface EditorFieldProps extends ComponentProps<typeof Field> {\r\n  label: string;\r\n  children: React.ReactElement;\r\n  promoNode?: React.ReactNode;\r\n  width?: number | string;\r\n  optional?: boolean;\r\n  tooltip?: PopoverContent;\r\n  invalid?: boolean;\r\n  tag?: string;\r\n  dataTestId?: string;\r\n  borderColor?: string;\r\n  horizontal?: boolean;\r\n}\r\n\r\nexport const EditorField: React.FC<EditorFieldProps> = (props) => {\r\n  const { label, optional, tooltip, children, promoNode, width, invalid, borderColor, tag, dataTestId, horizontal, ...fieldProps } = props;\r\n\r\n  const theme = useTheme2();\r\n  const styles = getStyles(theme, width, invalid ? 'red' : borderColor, horizontal);\r\n\r\n  // Null check for backward compatibility\r\n  const childInputId = fieldProps?.htmlFor || ReactUtils?.getChildId(children);\r\n  const testId = (compType = '') => `infinity-query-field${compType ? '-' + compType : ''}-${(dataTestId || label).replace(/\\ /g, '-')}`.toLowerCase();\r\n\r\n  const labelEl = (\r\n    <>\r\n      <label className={styles.label} htmlFor={childInputId} data-testid={testId('label')}>\r\n        {label}\r\n        {tag && <Tag name={tag} className={styles.tag} colorIndex={10} />}\r\n        {optional && <span className={styles.optional}> - optional</span>}\r\n        {promoNode}\r\n        {tooltip && (\r\n          <Tooltip placement=\"top\" content={tooltip} theme=\"info\">\r\n            <Icon name=\"info-circle\" size=\"sm\" className={styles.icon} />\r\n          </Tooltip>\r\n        )}\r\n      </label>\r\n      <Space v={0.5} />\r\n    </>\r\n  );\r\n\r\n  if (horizontal) {\r\n    return (\r\n      <div className={styles.root} data-testid={testId('wrapper')}>\r\n        <Field className={styles.field} label={labelEl} {...fieldProps} horizontal={true}>\r\n          {children}\r\n        </Field>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={styles.root} data-testid={testId('wrapper')}>\r\n      <Field className={styles.field} label={labelEl} {...fieldProps}>\r\n        {children}\r\n      </Field>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getStyles = stylesFactory((theme: GrafanaTheme2, width?: number | string, borderColor = 'transparent', horizontal = false) => {\r\n  return {\r\n    root: css({\r\n      minWidth: theme.spacing(width ?? 0),\r\n      paddingInlineStart: '7px',\r\n      paddingInlineEnd: '5px',\r\n      borderLeft: `1px solid ${borderColor}`,\r\n      marginRight: horizontal ? '10px' : '5px',\r\n    }),\r\n    label: css({\r\n      fontSize: 12,\r\n      fontWeight: theme.typography.fontWeightMedium,\r\n      paddingLeft: '1px',\r\n      border: horizontal ? `1px solid ${borderColor}` : '',\r\n      padding: horizontal ? '5px 10px 5px 0px' : '',\r\n      textAlign: horizontal ? 'right' : 'left',\r\n    }),\r\n    tag: css({\r\n      marginLeft: '10px',\r\n    }),\r\n    optional: css({\r\n      fontStyle: 'italic',\r\n      color: theme.colors.text.secondary,\r\n    }),\r\n    field: css({\r\n      marginBottom: 0, // GrafanaUI/Field has a bottom margin which we must remove\r\n      marginRight: '0px',\r\n    }),\r\n    icon: css({\r\n      color: theme.colors.text.secondary,\r\n      marginLeft: theme.spacing(1),\r\n      ':hover': {\r\n        color: theme.colors.text.primary,\r\n      },\r\n    }),\r\n  };\r\n});\r\n","import React, { useRef } from 'react';\r\nimport { InlineField, Input, Button, Checkbox } from '@grafana/ui';\r\nimport { EditorRow, EditorRows } from '../../extended/EditorRow';\r\nimport { EditorField } from '../../extended/EditorField';\r\n\r\nexport function Api({ query, onChange }: any) {\r\n  const { elementType, instanceID, method, columns, isObjectInsteadOfArray, isDataInColumn, rowsRoots } = query;\r\n\r\n  const [allColumns, setAllColumns] = React.useState<any>([]);\r\n  const fetchingComplete = useRef(false);\r\n\r\n  React.useEffect(() => {\r\n    if (fetchingComplete.current === false) {\r\n      setAllColumns(columns ? columns : [{\r\n        selector: \"\",\r\n        as: \"\",\r\n        formatAs: \"\",\r\n      }]);\r\n    }\r\n    fetchingComplete.current = true;\r\n  }, [columns]);\r\n\r\n  const onChangeElementType = (e: any) => {\r\n    onChange({ ...query, elementType: e.target.value });\r\n  };\r\n\r\n  const onChangeInstanceID = (e: any) => {\r\n    onChange({ ...query, instanceID: e.target.value });\r\n  };\r\n\r\n  const onChangeMethod = (e: any) => {\r\n    onChange({ ...query, method: e.target.value });\r\n  };\r\n\r\n  const onChangeColumn = (index: any, columnsList: any, key: any, value: any) => {\r\n    columnsList[index][key] = value;\r\n    onChange({ ...query, columns: JSON.parse(JSON.stringify(columnsList)) });\r\n  };\r\n\r\n  const onClickAddColumn = () => {\r\n    allColumns.push({\r\n      selector: \"\",\r\n      as: \"\",\r\n      formatAs: \"\",\r\n    });\r\n    setAllColumns(JSON.parse(JSON.stringify(allColumns)));\r\n  };\r\n\r\n  const onClickRemove = (columns: any, index: any) => {\r\n    columns.splice(index, 1);\r\n    setAllColumns(JSON.parse(JSON.stringify(columns)));\r\n  };\r\n\r\n  const renderColumns = (columns: any) => {\r\n    const retData: any = [];\r\n    for (let i = 0; i < columns.length; i++) {\r\n      const column = columns[i];\r\n      retData.push(\r\n        <EditorRow label=\"\" key={`column-${i}`}>\r\n          <InlineField label=\"Selector\">\r\n            <Input value={column.selector} onChange={(e: any) => onChangeColumn(i, columns, \"selector\", e.target.value)} />\r\n          </InlineField>\r\n          <InlineField label=\"as\">\r\n            <Input value={column.as} onChange={(e: any) => onChangeColumn(i, columns, \"as\", e.target.value)} />\r\n          </InlineField>\r\n          <InlineField label=\"Format as\">\r\n            <Input value={column.formatAs} onChange={(e: any) => onChangeColumn(i, columns, \"formatAs\", e.target.value)} />\r\n          </InlineField>\r\n          {\r\n            columns.length > 1 ?\r\n              <Button onClick={() => onClickRemove(columns, i)} icon='times'></Button> : <></>\r\n          }\r\n        </EditorRow>\r\n      );\r\n    }\r\n    return retData;\r\n  };\r\n\r\n  const onChangeObjectArray = (e: any) => {\r\n    onChange({ ...query, isObjectInsteadOfArray: e.target.checked });\r\n  };\r\n\r\n  const onChangeDataInColumn = (e: any) => {\r\n    onChange({ ...query, isDataInColumn: e.target.checked });\r\n  };\r\n\r\n  const onChangeRowsRoots = (e: any) => {\r\n    onChange({ ...query, rowsRoots: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <EditorRows>\r\n      <EditorRow label=\"\">\r\n        <InlineField label=\"Element Type\">\r\n          <Input value={elementType} onChange={(e: any) => onChangeElementType(e)} />\r\n        </InlineField>\r\n        <InlineField label=\"Instance ID\">\r\n          <Input value={instanceID} onChange={(e: any) => onChangeInstanceID(e)} />\r\n        </InlineField>\r\n        <InlineField label=\"Method\">\r\n          <Input value={method} onChange={(e: any) => onChangeMethod(e)} />\r\n        </InlineField>\r\n      </EditorRow>\r\n      <EditorRow label=\"\">\r\n        <h5><b>Parsing Option and Result Field</b></h5>\r\n      </EditorRow>\r\n      <EditorRow label=\"\">\r\n        <EditorField label='Rows/Root - Optional'>\r\n          <textarea value={rowsRoots} onChange={onChangeRowsRoots} placeholder='Rows/Root Selector'></textarea>\r\n        </EditorField>\r\n      </EditorRow>\r\n      <EditorRow label=\"\">\r\n        <label>Rows/Root - Optional</label>\r\n      </EditorRow>\r\n      {renderColumns(allColumns)}\r\n      <EditorRow label=\"Column - Optional\">\r\n        <Button onClick={onClickAddColumn} icon='plus-square'>Column</Button>\r\n      </EditorRow>\r\n      <EditorRow label=\"\">\r\n        <label >Advance Options - Optional</label>\r\n      </EditorRow>\r\n      <EditorRow label=\"\">\r\n        <Checkbox value={isObjectInsteadOfArray} label='Root returns object instead of array?' onChange={onChangeObjectArray} />\r\n      </EditorRow>\r\n      <EditorRow label=\"\">\r\n        <Checkbox value={isDataInColumn} label='Is data in column format?' onChange={onChangeDataInColumn} />\r\n      </EditorRow>\r\n    </EditorRows>\r\n  );\r\n}\r\n","import { DataSourcePlugin } from '@grafana/data';\r\nimport { DataSource } from './datasource';\r\nimport { ConfigEditor } from './components/ConfigEditor';\r\nimport { QueryEditor } from './components/QueryEditor';\r\nimport { MyQuery, MyDataSourceOptions } from './types';\r\n\r\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\r\n  .setConfigEditor(ConfigEditor)\r\n  .setQueryEditor(QueryEditor);\r\n","import React, { ChangeEvent } from 'react';\r\nimport { InlineField, Input } from '@grafana/ui';\r\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\r\nimport { MyDataSourceOptions } from '../types';\r\n\r\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions> { }\r\n\r\nexport function ConfigEditor(props: Props) {\r\n  const { onOptionsChange, options } = props;\r\n\r\n  const onPathChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const jsonData = {\r\n      ...options.jsonData,\r\n      path: event.target.value,\r\n    };\r\n    onOptionsChange({ ...options, jsonData });\r\n  };\r\n\r\n  const onAPIEndPointChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const jsonData = {\r\n      ...options.jsonData,\r\n      apiEndpoint: event.target.value,\r\n    };\r\n    onOptionsChange({ ...options, jsonData });\r\n  };\r\n\r\n  // Secure field (only sent to the backend)\r\n  // const onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n  //   onOptionsChange({\r\n  //     ...options,\r\n  //     secureJsonData: {\r\n  //       apiKey: event.target.value,\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  // const onResetAPIKey = () => {\r\n  //   onOptionsChange({\r\n  //     ...options,\r\n  //     secureJsonFields: {\r\n  //       ...options.secureJsonFields,\r\n  //       apiKey: false,\r\n  //     },\r\n  //     secureJsonData: {\r\n  //       ...options.secureJsonData,\r\n  //       apiKey: '',\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  const { jsonData } = options;\r\n  // const { jsonData, secureJsonFields } = options;\r\n  // const secureJsonData = (options.secureJsonData || {}) as MySecureJsonData;\r\n\r\n  return (\r\n    <div className=\"gf-form-group\">\r\n      <InlineField label=\"Path\" labelWidth={12}>\r\n        <Input\r\n          onChange={onPathChange}\r\n          value={jsonData.path || ''}\r\n          placeholder=\"json field returned to frontend\"\r\n          width={40}\r\n        />\r\n      </InlineField>\r\n      {/* <InlineField label=\"API Key\" labelWidth={12}>\r\n        <SecretInput\r\n          isConfigured={(secureJsonFields && secureJsonFields.apiKey) as boolean}\r\n          value={secureJsonData.apiKey || ''}\r\n          placeholder=\"Test\"\r\n          width={40}\r\n          onReset={onResetAPIKey}\r\n          onChange={onAPIKeyChange}\r\n        />\r\n      </InlineField> */}\r\n      <InlineField label=\"API Endpoint\" labelWidth={12}>\r\n        <Input\r\n          onChange={onAPIEndPointChange}\r\n          value={jsonData.apiEndpoint || ''}\r\n          placeholder=\"API Endpoint\"\r\n          width={40}\r\n        />\r\n      </InlineField>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { InlineField, Select, Input } from '@grafana/ui';\r\nimport {\r\n  SOURCE_TYPE,\r\n  SOURCE_VALUE,\r\n  METRIC_TYPE,\r\n  MetricEditorMode\r\n} from '../common-ds';\r\nimport { Metric } from './EditorComponents/Metric';\r\nimport { Log } from './EditorComponents/Log';\r\nimport { Trace } from './EditorComponents/Trace';\r\nimport { Api } from './EditorComponents/Api';\r\nimport { services } from '../service';\r\n\r\nexport function QueryEditor({ query, onChange, onRunQuery }: any) {\r\n  const [elementId, setElementId] = useState(\"\");\r\n  const [metricsList, setMetricsList] = useState([]);\r\n  const onChanged = useRef(false);\r\n\r\n  const getCloudElements = useCallback((id: string, query: any) => {\r\n    services.getCloudElements(id).then((res) => {\r\n      if (res && res[0]) {\r\n        const cloudElement = res[0];\r\n        query = {\r\n          ...query,\r\n          \"elementType\": cloudElement.elementType,\r\n          \"elementId\": parseInt(id, 10),\r\n          \"cloudIdentifierName\": cloudElement.instanceName,\r\n          \"cloudIdentifierId\": cloudElement.instanceId,\r\n          \"type\": \"appkube-cloudwatch\",\r\n          \"queryMode\": \"Metrics\",\r\n          \"source\": \"url\",\r\n          \"productId\": 1,\r\n          \"environmentId\": parseInt(id, 10),\r\n          \"moduleId\": 2,\r\n          \"serviceId\": 2,\r\n          \"serviceType\": \"java app service\",\r\n          \"cmdbUrl\": \"\",\r\n          \"vaultUrl\": \"\",\r\n          \"namespace\": cloudElement.elementType,\r\n          \"matchExact\": true,\r\n          \"expression\": \"\",\r\n          \"id\": \"\",\r\n          \"alias\": \"\",\r\n          \"period\": \"\",\r\n          \"metricQueryType\": 0,\r\n          \"metricEditorMode\": 0,\r\n          \"sqlExpression\": \"\",\r\n          \"accountId\": \"657907747545\",\r\n          \"region\": \"\"\r\n        };\r\n        onChange({ ...query });\r\n        services.getMetricsList(res[0].elementType).then((res) => {\r\n          setMetricsList(res);\r\n        });\r\n      }\r\n    });\r\n  }, [onChange]);\r\n\r\n  useEffect(() => {\r\n    if (onChanged.current === false) {\r\n      const id = findParam(\"var-elementId\", window.location.href);\r\n      if (id) {\r\n        setElementId(id);\r\n        getCloudElements(id, query);\r\n      } else {\r\n        alert(\"Please set 'elementId' variable\");\r\n      }\r\n      onChanged.current = true;\r\n    }\r\n  }, [query, onChange, getCloudElements]);\r\n\r\n  const findParam = (paramName: string, url: string) => {\r\n    if (!url) {\r\n      url = location.href;\r\n    }\r\n    paramName = paramName.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\r\n    const regexS = \"[\\\\?&]\" + paramName + \"=([^&#]*)\";\r\n    const regex = new RegExp(regexS);\r\n    const results = regex.exec(url);\r\n    return results == null ? \"\" : results[1];\r\n  }\r\n\r\n  const onSourceTypeChange = (value: any) => {\r\n    if (value === SOURCE_VALUE.METRIC) {\r\n      query.queryType = 'timeSeriesQuery';\r\n    } else if (value === SOURCE_VALUE.LOG) {\r\n      query.queryType = 'logAction';\r\n    }\r\n    query.sourceType = value;\r\n    if (!elementId) {\r\n      const id = findParam(\"var-elementId\", window.location.href);\r\n      if (id) {\r\n        setElementId(id);\r\n        getCloudElements(id, query);\r\n      } else {\r\n        alert(\"Please set 'elementId' variable\");\r\n      }\r\n    } else {\r\n      getCloudElements(elementId, query);\r\n    }\r\n  };\r\n\r\n  const onMetricTypeChange = (value: any) => {\r\n    onChange({ ...query, metricType: value });\r\n  };\r\n\r\n  const onChangeData = (value: any) => {\r\n    onChange({ ...query, ...value });\r\n  };\r\n\r\n  const {\r\n    sourceType,\r\n    metricType,\r\n    metricEditorMode,\r\n  } = query;\r\n\r\n  const defaultMetricMode = metricEditorMode ? metricEditorMode : MetricEditorMode.Builder;\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <InlineField label=\"Source Type\">\r\n          <Select\r\n            className=\"min-width-12 width-12\"\r\n            value={sourceType}\r\n            options={SOURCE_TYPE}\r\n            onChange={(e) => onSourceTypeChange(e.value)}\r\n            menuShouldPortal={true}\r\n          />\r\n        </InlineField>\r\n        {\r\n          sourceType === SOURCE_VALUE.METRIC ?\r\n            <>\r\n              <InlineField label=\"Source Type\">\r\n                <Select\r\n                  className=\"min-width-12 width-12\"\r\n                  value={metricType}\r\n                  options={METRIC_TYPE}\r\n                  onChange={(e) => onMetricTypeChange(e.value)}\r\n                  menuShouldPortal={true}\r\n                />\r\n              </InlineField>\r\n              <InlineField label=\"Element ID\">\r\n                <Input disabled={true} value={elementId} />\r\n              </InlineField>\r\n              <div style={{ display: \"block\", flexGrow: \"1\" }} />\r\n            </>\r\n            :\r\n            <></>\r\n        }\r\n      </div>\r\n      <div>\r\n        {\r\n          sourceType === SOURCE_VALUE.METRIC ?\r\n            <Metric\r\n              query={query}\r\n              onChange={onChangeData}\r\n              editorMode={defaultMetricMode}\r\n              metricsList={metricsList}\r\n            />\r\n            :\r\n            <></>\r\n        }\r\n        {\r\n          sourceType === SOURCE_VALUE.LOG ?\r\n            <Log\r\n              query={query}\r\n              onChange={onChangeData}\r\n            />\r\n            :\r\n            <></>\r\n        }\r\n        {\r\n          sourceType === SOURCE_VALUE.TRACE ?\r\n            <Trace\r\n              query={query}\r\n              onChange={onChangeData}\r\n            />\r\n            :\r\n            <></>\r\n        }\r\n        {\r\n          sourceType === SOURCE_VALUE.API ?\r\n            <Api\r\n              query={query}\r\n              onChange={onChangeData}\r\n            />\r\n            :\r\n            <></>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__4__","__WEBPACK_EXTERNAL_MODULE__5__","__WEBPACK_EXTERNAL_MODULE__6__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","services","id","fetch","then","response","json","nameSpace","DEFAULT_QUERY","constant","DataSource","DataSourceWithBackend","constructor","instanceSettings","super","findParam","paramName","url","location","href","replace","results","RegExp","exec","getCloudElements","from","res","query","cloudElement","elementType","parseInt","instanceName","instanceId","getDefaultQuery","_","request","this","window","pipe","mergeMap","targets","i","length","assign","SOURCE_VALUE","MetricEditorMode","SOURCE_TYPE","label","METRIC_TYPE","STASTISTIC","Builder","Code","Stack","_ref","children","props","_objectWithoutPropertiesLoose","_excluded","styles","useStyles2","useCallback","theme","getStyles","React","className","root","_props$direction","_props$wrap","_props$gap","css","display","flexDirection","direction","flexWrap","wrap","alignItems","gap","spacing","flexGrow","EditorRow","collapsible","collapsed","title","dataTestId","show","setShow","useState","testId","compType","arguments","toLowerCase","Button","icon","fill","size","variant","onClick","e","preventDefault","style","marginRight","collapseTile","collapseTileSecondary","marginTop","marginLeft","padding","backgroundColor","colors","background","secondary","borderRadius","shape","color","text","fontSize","typography","bodySmall","EditorRows","_ref2","Metric","onChange","editorMode","metricsList","cloudIdentifierId","metricName","statistic","metricQuery","InlineField","Input","target","onChangeElementType","onChangeInstanceID","Select","options","onChangeMetricName","menuShouldPortal","onChangeStatistic","placeholder","onChangeMetricQuery","Log","instanceID","logQuery","logGroup","onChangeLogGroup","onChangeLogQuery","Trace","traceQuery","traceLocation","onChangeTraceLocation","onChangeTraceQuery","Space","useTheme2","cx","wrapper","defaultProps","v","h","layout","stylesFactory","_props$h","_props$v","paddingRight","paddingBottom","EditorField","optional","tooltip","promoNode","width","invalid","borderColor","tag","horizontal","fieldProps","childInputId","htmlFor","ReactUtils","labelEl","Tag","name","colorIndex","Tooltip","placement","content","Icon","_Space","Field","_extends","field","minWidth","paddingInlineStart","paddingInlineEnd","borderLeft","fontWeight","fontWeightMedium","paddingLeft","border","textAlign","fontStyle","marginBottom","primary","Api","method","columns","isObjectInsteadOfArray","isDataInColumn","rowsRoots","allColumns","setAllColumns","fetchingComplete","useRef","current","selector","as","formatAs","onChangeColumn","index","columnsList","JSON","parse","stringify","onClickRemove","splice","onChangeMethod","_EditorRow","_EditorRow2","retData","column","push","renderColumns","onClickAddColumn","_EditorRow3","Checkbox","checked","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","jsonData","labelWidth","event","path","apiEndpoint","setQueryEditor","onRunQuery","elementId","setElementId","setMetricsList","onChanged","useEffect","alert","onChangeData","sourceType","metricType","metricEditorMode","defaultMetricMode","queryType","onSourceTypeChange","onMetricTypeChange","disabled"],"sourceRoot":""}